package com.crisil;

import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
import org.apache.flink.table.api.EnvironmentSettings;
import org.apache.flink.table.api.bridge.java.StreamTableEnvironment;
import org.apache.flink.table.api.StatementSet;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TestUdf
{
	public static void main( String[] args ) throws Exception {
		final Logger LOG = LoggerFactory.getLogger(TestUdf.class);
		try {
			//CREATE STREAM AND TABLE ENVIRONMENT
			StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();
			EnvironmentSettings settings= EnvironmentSettings.newInstance().inStreamingMode().build();
			StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env,settings);

			//CHECKPOINTING
			env.enableCheckpointing(10000);

			//SET PARALLELISM
			env.setParallelism(4);

			// Register UDF
			//tableEnv.createTemporarySystemFunction("date_check",com.crisil.ValidateDate.class);
			//LOG.info("Registered UDF: date_check");

			//Define the source
			tableEnv.executeSql(
					"CREATE TABLE SOLACE_SOURCE ( " +
							" GG_ID STRING, " +
							" messageid STRING, " +
							" headers STRING, " +
							" payload STRING " +
							") WITH (" +
							" 'connector' = 'solace', " +
							" 'host' = 'tcp://<HOSTNAME>:<PORT>', " +
							" 'vpn' = '<VPN_NAME>', " +
							" 'username' = '<USERNAME>', " +
							" 'password' = '<PASS>', " +
							" 'queue' = '<QUEUE>', " +
							" 'format' = 'json' " +
							")"
			).await();

			//Define Iceberg catalog
			tableEnv.executeSql(
					"CREATE CATALOG test WITH (" +
							"'type' = 'iceberg', " +
							"'uri' = 'jdbc:*****://hbl-azure-lakehouse-preprod-postgresflexi01.postgres.database.azure.com:5432/lakehouse?user=pgsqladmin&password=*****&sslmode=require', " +
							"'warehouse' = 'abfs://lakehouse@hblazlakehousestg01.dfs.core.windows.net/test', " +
							"'adls.auth.shared-key.account.name' = '******', " +
							"'adls.auth.shared-key.account.key' = '*******', " +
							"'catalog-impl' = 'org.apache.iceberg.jdbc.JdbcCatalog', " +
							"'io-impl' = 'org.apache.iceberg.azure.adlsv2.ADLSFileIO'," +
							"'format-version' = '2'" +
							")"
			).await();

			// Create temporary function
			tableEnv.executeSql("CREATE TEMPORARY FUNCTION date_check as 'com.crisil.ValidateDate'").await();

			// Create a StatementSet for multiple INSERT operations
			StatementSet statementSet = tableEnv.createStatementSet();

			// INSERT into RAW SINK Statement into sink_table2
			String insertRawSink = "INSERT INTO test.flinkstream.raw_sink_ch_nobook SELECT coalesce(CAST(JSON_VALUE(headers, '$.GG_ID')as STRING),'NA') as GG_ID, coalesce(CAST(messageid as STRING),'NA')as messageid, coalesce(CAST(JSON_VALUE(headers, '$.GG_OPTYPE')as STRING),'NA') as OP_TYPE, CURRENT_TIMESTAMP AS LOAD_DATE,  CAST(JSON_VALUE(payload, '$.before.DAT_TXN')AS timestamp(6) ) AS dat_txn, CAST(JSON_VALUE(payload, '$.before.COD_CC_BRN_TXN') AS BIGINT) AS cod_cc_brn_txn, CAST(JSON_VALUE(payload, '$.before.COD_USERNO') AS BIGINT) AS cod_userno, CAST(JSON_VALUE(payload, '$.before.CTR_BATCH_NO') AS BIGINT) AS ctr_batch_no, CAST(JSON_VALUE(payload, '$.before.REF_SYS_TR_AUD_NO') AS BIGINT) AS ref_sys_tr_aud_no, CAST(JSON_VALUE(payload, '$.before.REF_SUB_SEQ_NO') AS DOUBLE) AS ref_sub_seq_no, JSON_VALUE(payload, '$.before.COD_ACCT_NO') AS cod_acct_no, JSON_VALUE(payload, '$.before.TXT_TXN_DESC') AS txt_txn_desc, CAST( JSON_VALUE(payload, '$.before.DAT_VALUE') as timestamp(6)) AS dat_value, JSON_VALUE(payload, '$.before.REF_CHQ_NO') AS ref_chq_no, JSON_VALUE(payload, '$.before.COD_DRCR') AS cod_drcr, CAST(JSON_VALUE(payload, '$.before.COD_TXN_MNEMONIC') AS BIGINT) AS cod_txn_mnemonic, JSON_VALUE(payload, '$.before.COD_TXN_LITERAL') AS cod_txn_literal, CAST(JSON_VALUE(payload, '$.before.AMT_TXN') AS DOUBLE) AS amt_txn, JSON_VALUE(payload, '$.before.FLG_PASBKUPD') AS flg_pasbkupd, CAST(JSON_VALUE(payload, '$.before.RAT_CCY') AS DOUBLE) AS rat_ccy, CAST(JSON_VALUE(payload, '$.before.COD_MSG_TYP') AS BIGINT) AS cod_msg_typ, CAST(JSON_VALUE(payload, '$.before.COD_PROC') AS BIGINT) AS cod_proc, CAST(JSON_VALUE(payload, '$.before.CTR_UPDAT_SRLNO') AS BIGINT) AS ctr_updat_srlno, CAST (JSON_VALUE(payload, '$.before.DAT_POST') as timestamp(6)) AS dat_post, CAST(JSON_VALUE(payload, '$.before.AMT_TXN_TCY') AS DOUBLE) AS amt_txn_tcy, CAST(JSON_VALUE(payload, '$.before.COD_TXN_CCY') AS DOUBLE) AS cod_txn_ccy, CAST(JSON_VALUE(payload, '$.before.RAT_CONV_TCLCY') AS DOUBLE) AS rat_conv_tclcy, CAST(JSON_VALUE(payload, '$.before.COD_SC') AS BIGINT) AS cod_sc, JSON_VALUE(payload, '$.before.COD_AUTH_payload') AS COD_AUTH_ID, JSON_VALUE(payload, '$.before.REF_CARD_NO') AS ref_card_no, JSON_VALUE(payload, '$.before.REF_TXN_NO') AS ref_txn_no, JSON_VALUE(payload, '$.before.REF_USR_NO') AS ref_usr_no, JSON_VALUE(payload, '$.before.TXT_ADDL_INFO') AS txt_addl_info, CAST( JSON_VALUE(payload, '$.before.DAT_TS_TXN_INIT')as timestamp(6)) AS dat_ts_txn_init, CAST( JSON_VALUE(payload, '$.before.DAT_TS_SENT_FOR_AUTH')as timestamp(6)) AS dat_ts_sent_for_auth, CAST(JSON_VALUE(payload, '$.before.DAT_TS_AUTH')as timestamp(6)) AS dat_ts_auth, cast( JSON_VALUE(payload, '$.before.DAT_TS_SUB_FOR_PROCESSING')as timestamp(6)) AS dat_ts_sub_for_processing, cast( JSON_VALUE(payload, '$.before.DAT_TS_SENT_TO_HOST')as timestamp(6)) AS dat_ts_sent_to_host, cast(JSON_VALUE(payload, '$.before.DAT_TS_HOST_PROCESSING')as timestamp(6)) AS dat_ts_host_processing, CAST(JSON_VALUE(payload, '$.before.COD_ENTITY_VPD') AS BIGINT) AS cod_entity_vpd, CAST(JSON_VALUE(payload, '$.after.DAT_TXN')AS timestamp(6) ) AS dat_txn, CAST(JSON_VALUE(payload, '$.after.COD_CC_BRN_TXN') AS BIGINT) AS cod_cc_brn_txn, CAST(JSON_VALUE(payload, '$.after.COD_USERNO') AS BIGINT) AS cod_userno, CAST(JSON_VALUE(payload, '$.after.CTR_BATCH_NO') AS BIGINT) AS ctr_batch_no, CAST(JSON_VALUE(payload, '$.after.REF_SYS_TR_AUD_NO') AS BIGINT) AS ref_sys_tr_aud_no, CAST(JSON_VALUE(payload, '$.after.REF_SUB_SEQ_NO') AS DOUBLE) AS ref_sub_seq_no, JSON_VALUE(payload, '$.after.COD_ACCT_NO') AS cod_acct_no, JSON_VALUE(payload, '$.after.TXT_TXN_DESC') AS txt_txn_desc, CAST( JSON_VALUE(payload, '$.after.DAT_VALUE') as timestamp(6)) AS dat_value, JSON_VALUE(payload, '$.after.REF_CHQ_NO') AS ref_chq_no, JSON_VALUE(payload, '$.after.COD_DRCR') AS cod_drcr, CAST(JSON_VALUE(payload, '$.after.COD_TXN_MNEMONIC') AS BIGINT) AS cod_txn_mnemonic, JSON_VALUE(payload, '$.after.COD_TXN_LITERAL') AS cod_txn_literal, CAST(JSON_VALUE(payload, '$.after.AMT_TXN') AS DOUBLE) AS amt_txn, JSON_VALUE(payload, '$.after.FLG_PASBKUPD') AS flg_pasbkupd, CAST(JSON_VALUE(payload, '$.after.RAT_CCY') AS DOUBLE) AS rat_ccy, CAST(JSON_VALUE(payload, '$.after.COD_MSG_TYP') AS BIGINT) AS cod_msg_typ, CAST(JSON_VALUE(payload, '$.after.COD_PROC') AS BIGINT) AS cod_proc, CAST(JSON_VALUE(payload, '$.after.CTR_UPDAT_SRLNO') AS BIGINT) AS ctr_updat_srlno, CAST (JSON_VALUE(payload, '$.after.DAT_POST') as timestamp(6)) AS dat_post, CAST(JSON_VALUE(payload, '$.after.AMT_TXN_TCY') AS DOUBLE) AS amt_txn_tcy, CAST(JSON_VALUE(payload, '$.after.COD_TXN_CCY') AS DOUBLE) AS cod_txn_ccy, CAST(JSON_VALUE(payload, '$.after.RAT_CONV_TCLCY') AS DOUBLE) AS rat_conv_tclcy, CAST(JSON_VALUE(payload, '$.after.COD_SC') AS BIGINT) AS cod_sc, JSON_VALUE(payload, '$.after.COD_AUTH_payload') AS COD_AUTH_ID, JSON_VALUE(payload, '$.after.REF_CARD_NO') AS ref_card_no, JSON_VALUE(payload, '$.after.REF_TXN_NO') AS ref_txn_no, JSON_VALUE(payload, '$.after.REF_USR_NO') AS ref_usr_no, JSON_VALUE(payload, '$.after.TXT_ADDL_INFO') AS txt_addl_info, CAST( JSON_VALUE(payload, '$.after.DAT_TS_TXN_INIT')as timestamp(6)) AS dat_ts_txn_init, CAST( JSON_VALUE(payload, '$.after.DAT_TS_SENT_FOR_AUTH')as timestamp(6)) AS dat_ts_sent_for_auth, CAST(JSON_VALUE(payload, '$.after.DAT_TS_AUTH')as timestamp(6)) AS dat_ts_auth, cast( JSON_VALUE(payload, '$.after.DAT_TS_SUB_FOR_PROCESSING')as timestamp(6)) AS dat_ts_sub_for_processing, cast( JSON_VALUE(payload, '$.after.DAT_TS_SENT_TO_HOST')as timestamp(6)) AS dat_ts_sent_to_host, cast(JSON_VALUE(payload, '$.after.DAT_TS_HOST_PROCESSING')as timestamp(6)) AS dat_ts_host_processing, CAST(JSON_VALUE(payload, '$.after.COD_ENTITY_VPD') AS BIGINT) AS cod_entity_vpd FROM default_catalog.default_database.SOLACE_SOURCE";

			// INSERT AFTER Statement into sink_table1
			String insertAfter = "INSERT INTO test.flinkstream.ch_nobook_prod SELECT CAST(JSON_VALUE(payload, '$.after.DAT_TXN')AS timestamp(6) ) AS dat_txn, CAST(JSON_VALUE(payload, '$.after.COD_CC_BRN_TXN') AS BIGINT) AS cod_cc_brn_txn, CAST(JSON_VALUE(payload, '$.after.COD_USERNO') AS BIGINT) AS cod_userno, CAST(JSON_VALUE(payload, '$.after.CTR_BATCH_NO') AS BIGINT) AS ctr_batch_no, CAST(JSON_VALUE(payload, '$.after.REF_SYS_TR_AUD_NO') AS BIGINT) AS ref_sys_tr_aud_no, CAST(JSON_VALUE(payload, '$.after.REF_SUB_SEQ_NO') AS DOUBLE) AS ref_sub_seq_no, JSON_VALUE(payload, '$.after.COD_ACCT_NO') AS cod_acct_no, JSON_VALUE(payload, '$.after.TXT_TXN_DESC') AS txt_txn_desc, CAST( JSON_VALUE(payload, '$.after.DAT_VALUE') as timestamp(6)) AS dat_value, JSON_VALUE(payload, '$.after.REF_CHQ_NO') AS ref_chq_no, JSON_VALUE(payload, '$.after.COD_DRCR') AS cod_drcr, CAST(JSON_VALUE(payload, '$.after.COD_TXN_MNEMONIC') AS BIGINT) AS cod_txn_mnemonic, JSON_VALUE(payload, '$.after.COD_TXN_LITERAL') AS cod_txn_literal, CAST(JSON_VALUE(payload, '$.after.AMT_TXN') AS decimal(35,15)) AS amt_txn, JSON_VALUE(payload, '$.after.FLG_PASBKUPD') AS flg_pasbkupd, CAST(JSON_VALUE(payload, '$.after.RAT_CCY') AS decimal(35,15)) AS rat_ccy, CAST(JSON_VALUE(payload, '$.after.COD_MSG_TYP') AS BIGINT) AS cod_msg_typ, CAST(JSON_VALUE(payload, '$.after.COD_PROC') AS BIGINT) AS cod_proc, CAST(JSON_VALUE(payload, '$.after.CTR_UPDAT_SRLNO') AS BIGINT) AS ctr_updat_srlno, CAST (JSON_VALUE(payload, '$.after.DAT_POST') as timestamp(6)) AS dat_post, CAST(JSON_VALUE(payload, '$.after.AMT_TXN_TCY') AS decimal(35,15)) AS amt_txn_tcy, CAST(JSON_VALUE(payload, '$.after.COD_TXN_CCY') AS decimal(35,15)) AS cod_txn_ccy, CAST(JSON_VALUE(payload, '$.after.RAT_CONV_TCLCY') AS decimal(35,15)) AS rat_conv_tclcy, CAST(JSON_VALUE(payload, '$.after.COD_SC') AS BIGINT) AS cod_sc, JSON_VALUE(payload, '$.after.COD_AUTH_PAYLOAD') AS COD_AUTH_ID, JSON_VALUE(payload, '$.after.REF_CARD_NO') AS ref_card_no, JSON_VALUE(payload, '$.after.REF_TXN_NO') AS ref_txn_no, JSON_VALUE(payload, '$.after.REF_USR_NO') AS ref_usr_no, JSON_VALUE(payload, '$.after.TXT_ADDL_INFO') AS txt_addl_info, CAST( JSON_VALUE(payload, '$.after.DAT_TS_TXN_INIT')as timestamp(6)) AS dat_ts_txn_init, CAST( JSON_VALUE(payload, '$.after.DAT_TS_SENT_FOR_AUTH')as timestamp(6)) AS dat_ts_sent_for_auth, CAST(JSON_VALUE(payload, '$.after.DAT_TS_AUTH')as timestamp(6)) AS dat_ts_auth, cast( JSON_VALUE(payload, '$.after.DAT_TS_SUB_FOR_PROCESSING')as timestamp(6)) AS dat_ts_sub_for_processing, cast( JSON_VALUE(payload, '$.after.DAT_TS_SENT_TO_HOST')as timestamp(6)) AS dat_ts_sent_to_host, cast(JSON_VALUE(payload, '$.after.DAT_TS_HOST_PROCESSING')as timestamp(6)) AS dat_ts_host_processing, CAST(JSON_VALUE(payload, '$.after.COD_ENTITY_VPD') AS BIGINT) AS cod_entity_vpd, CAST(YEAR(CAST(CURRENT_DATE AS DATE)) AS BIGINT) AS business_year, CAST(MONTH(CAST(CURRENT_DATE AS DATE)) AS BIGINT) AS business_month, CURRENT_DATE AS business_date, cast(MD5(CONCAT( coalesce(CAST( JSON_VALUE(payload, '$.after.DAT_TXN') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.COD_CC_BRN_TXN') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.COD_USERNO') AS STRING),'NA'), coalesce(CAST( JSON_VALUE(payload, '$.after.CTR_BATCH_NO') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.REF_SYS_TR_AUD_NO') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.REF_SUB_SEQ_NO') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.COD_ACCT_NO') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.TXT_TXN_DESC') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.DAT_VALUE') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.REF_CHQ_NO') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.COD_DRCR') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.COD_TXN_MNEMONIC') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.COD_TXN_LITERAL') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.AMT_TXN') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.FLG_PASBKUPD') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.RAT_CCY') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.COD_MSG_TYP') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.COD_PROC') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.CTR_UPDAT_SRLNO') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.DAT_POST') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.AMT_TXN_TCY') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.COD_TXN_CCY') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.RAT_CONV_TCLCY') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.COD_SC') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.COD_AUTH_PAYLOAD') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.REF_CARD_NO') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.REF_TXN_NO') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.REF_USR_NO') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.TXT_ADDL_INFO') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.DAT_TS_TXN_INIT') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.DAT_TS_SENT_FOR_AUTH') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.DAT_TS_AUTH') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.DAT_TS_SUB_FOR_PROCESSING') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.DAT_TS_SENT_TO_HOST') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.DAT_TS_HOST_PROCESSING') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.COD_ENTITY_VPD') AS STRING),'NA') )) as varchar(500)) AS rowhash, CAST(NULL AS VARCHAR) AS recordsurrogatekey, CURRENT_TIMESTAMP AS recordcreateddate, CURRENT_TIMESTAMP AS recordupdateddate, case when date_check(cast(cast(CAST (JSON_VALUE (payload, '$.after.DAT_POST') as timestamp (6)) as date) as varchar(20)))='FALSE' then 'Y' else 'N' end as ERROR_FLAG, cast(case when date_check(cast(cast(CAST (JSON_VALUE (payload, '$.after.DAT_POST') as timestamp (6)) as date) as varchar(20))) ='FALSE' then 'Invalid Posting Date' else null end as varchar(500)) as ERROR_MESSAGE, 'N' AS DEL_FLG,CURRENT_DATE AS PROCESS_DATE, 'CH_NOBOOK_BATCH' AS BATCH_ID , messageid FROM default_catalog.default_database.SOLACE_SOURCE where JSON_VALUE(headers, '$.GG_OPTYPE') IN ('INSERT')";

			// UPDATE AFTER Statement into sink_table1
			String updateAfter = "INSERT INTO test.flinkstream.ch_nobook_prod SELECT CAST(JSON_VALUE(payload, '$.after.DAT_TXN')AS timestamp(6) ) AS dat_txn, CAST(JSON_VALUE(payload, '$.after.COD_CC_BRN_TXN') AS BIGINT) AS cod_cc_brn_txn, CAST(JSON_VALUE(payload, '$.after.COD_USERNO') AS BIGINT) AS cod_userno, CAST(JSON_VALUE(payload, '$.after.CTR_BATCH_NO') AS BIGINT) AS ctr_batch_no, CAST(JSON_VALUE(payload, '$.after.REF_SYS_TR_AUD_NO') AS BIGINT) AS ref_sys_tr_aud_no, CAST(JSON_VALUE(payload, '$.after.REF_SUB_SEQ_NO') AS DOUBLE) AS ref_sub_seq_no, JSON_VALUE(payload, '$.after.COD_ACCT_NO') AS cod_acct_no, JSON_VALUE(payload, '$.after.TXT_TXN_DESC') AS txt_txn_desc, CAST( JSON_VALUE(payload, '$.after.DAT_VALUE') as timestamp(6)) AS dat_value, JSON_VALUE(payload, '$.after.REF_CHQ_NO') AS ref_chq_no, JSON_VALUE(payload, '$.after.COD_DRCR') AS cod_drcr, CAST(JSON_VALUE(payload, '$.after.COD_TXN_MNEMONIC') AS BIGINT) AS cod_txn_mnemonic, JSON_VALUE(payload, '$.after.COD_TXN_LITERAL') AS cod_txn_literal, CAST(JSON_VALUE(payload, '$.after.AMT_TXN') AS decimal(35,15)) AS amt_txn, JSON_VALUE(payload, '$.after.FLG_PASBKUPD') AS flg_pasbkupd, CAST(JSON_VALUE(payload, '$.after.RAT_CCY') AS decimal(35,15)) AS rat_ccy, CAST(JSON_VALUE(payload, '$.after.COD_MSG_TYP') AS BIGINT) AS cod_msg_typ, CAST(JSON_VALUE(payload, '$.after.COD_PROC') AS BIGINT) AS cod_proc, CAST(JSON_VALUE(payload, '$.after.CTR_UPDAT_SRLNO') AS BIGINT) AS ctr_updat_srlno, CAST (JSON_VALUE(payload, '$.after.DAT_POST') as timestamp(6)) AS dat_post, CAST(JSON_VALUE(payload, '$.after.AMT_TXN_TCY') AS decimal(35,15)) AS amt_txn_tcy, CAST(JSON_VALUE(payload, '$.after.COD_TXN_CCY') AS decimal(35,15)) AS cod_txn_ccy, CAST(JSON_VALUE(payload, '$.after.RAT_CONV_TCLCY') AS decimal(35,15)) AS rat_conv_tclcy, CAST(JSON_VALUE(payload, '$.after.COD_SC') AS BIGINT) AS cod_sc, JSON_VALUE(payload, '$.after.COD_AUTH_payload') AS COD_AUTH_ID, JSON_VALUE(payload, '$.after.REF_CARD_NO') AS ref_card_no, JSON_VALUE(payload, '$.after.REF_TXN_NO') AS ref_txn_no, JSON_VALUE(payload, '$.after.REF_USR_NO') AS ref_usr_no, JSON_VALUE(payload, '$.after.TXT_ADDL_INFO') AS txt_addl_info, CAST( JSON_VALUE(payload, '$.after.DAT_TS_TXN_INIT')as timestamp(6)) AS dat_ts_txn_init, CAST( JSON_VALUE(payload, '$.after.DAT_TS_SENT_FOR_AUTH')as timestamp(6)) AS dat_ts_sent_for_auth, CAST(JSON_VALUE(payload, '$.after.DAT_TS_AUTH')as timestamp(6)) AS dat_ts_auth, cast( JSON_VALUE(payload, '$.after.DAT_TS_SUB_FOR_PROCESSING')as timestamp(6)) AS dat_ts_sub_for_processing, cast( JSON_VALUE(payload, '$.after.DAT_TS_SENT_TO_HOST')as timestamp(6)) AS dat_ts_sent_to_host, cast(JSON_VALUE(payload, '$.after.DAT_TS_HOST_PROCESSING')as timestamp(6)) AS dat_ts_host_processing, CAST(JSON_VALUE(payload, '$.after.COD_ENTITY_VPD') AS BIGINT) AS cod_entity_vpd, CAST(YEAR(CAST(CURRENT_DATE AS DATE)) AS BIGINT) AS business_year, CAST(MONTH(CAST(CURRENT_DATE AS DATE)) AS BIGINT) AS business_month, CURRENT_DATE AS business_date, cast(MD5(CONCAT( coalesce(CAST( JSON_VALUE(payload, '$.after.DAT_TXN') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.COD_CC_BRN_TXN') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.COD_USERNO') AS STRING),'NA'), coalesce(CAST( JSON_VALUE(payload, '$.after.CTR_BATCH_NO') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.REF_SYS_TR_AUD_NO') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.REF_SUB_SEQ_NO') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.COD_ACCT_NO') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.TXT_TXN_DESC') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.DAT_VALUE') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.REF_CHQ_NO') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.COD_DRCR') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.COD_TXN_MNEMONIC') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.COD_TXN_LITERAL') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.AMT_TXN') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.FLG_PASBKUPD') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.RAT_CCY') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.COD_MSG_TYP') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.COD_PROC') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.CTR_UPDAT_SRLNO') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.DAT_POST') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.AMT_TXN_TCY') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.COD_TXN_CCY') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.RAT_CONV_TCLCY') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.COD_SC') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.COD_AUTH_payload') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.REF_CARD_NO') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.REF_TXN_NO') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.REF_USR_NO') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.TXT_ADDL_INFO') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.DAT_TS_TXN_INIT') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.DAT_TS_SENT_FOR_AUTH') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.DAT_TS_AUTH') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.DAT_TS_SUB_FOR_PROCESSING') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.DAT_TS_SENT_TO_HOST') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.DAT_TS_HOST_PROCESSING') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.after.COD_ENTITY_VPD') AS STRING),'NA') )) as varchar(500)) AS rowhash, CAST(NULL AS VARCHAR) AS recordsurrogatekey, CURRENT_TIMESTAMP AS recordcreateddate, CURRENT_TIMESTAMP AS recordupdateddate, 'N' as ERROR_FLAG, '' as ERROR_MESSAGE, 'N' AS DEL_FLG,CURRENT_DATE AS PROCESS_DATE, 'CH_NOBOOK_BATCH' AS BATCH_ID , messageid FROM default_catalog.default_database.SOLACE_SOURCE where JSON_VALUE(headers, '$.GG_OPTYPE') IN ('UPDATE')";

			// UPDATE BEFORE Statement into sink_table2
			String updateBefore = "INSERT INTO test.flinkstream.ch_nobook_prod select a.* from ( SELECT CAST(JSON_VALUE(payload, '$.before.DAT_TXN') AS timestamp(6) ) AS dat_txn, CAST(JSON_VALUE(payload, '$.before.COD_CC_BRN_TXN') AS BIGINT) AS cod_cc_brn_txn, CAST(JSON_VALUE(payload, '$.before.COD_USERNO') AS BIGINT) AS cod_userno, CAST(JSON_VALUE(payload, '$.before.CTR_BATCH_NO') AS BIGINT) AS ctr_batch_no, CAST(JSON_VALUE(payload, '$.before.REF_SYS_TR_AUD_NO') AS BIGINT) AS ref_sys_tr_aud_no, CAST(JSON_VALUE(payload, '$.before.REF_SUB_SEQ_NO') AS DOUBLE) AS ref_sub_seq_no, JSON_VALUE(payload, '$.before.COD_ACCT_NO') AS cod_acct_no, JSON_VALUE(payload, '$.before.TXT_TXN_DESC') AS txt_txn_desc, CAST( JSON_VALUE(payload, '$.before.DAT_VALUE') as timestamp(6)) AS dat_value, JSON_VALUE(payload, '$.before.REF_CHQ_NO') AS ref_chq_no, JSON_VALUE(payload, '$.before.COD_DRCR') AS cod_drcr, CAST(JSON_VALUE(payload, '$.before.COD_TXN_MNEMONIC') AS BIGINT) AS cod_txn_mnemonic, JSON_VALUE(payload, '$.before.COD_TXN_LITERAL') AS cod_txn_literal, CAST(JSON_VALUE(payload, '$.before.AMT_TXN') AS decimal(35,15)) AS amt_txn, JSON_VALUE(payload, '$.before.FLG_PASBKUPD') AS flg_pasbkupd, CAST(JSON_VALUE(payload, '$.before.RAT_CCY') AS decimal(35,15)) AS rat_ccy, CAST(JSON_VALUE(payload, '$.before.COD_MSG_TYP') AS BIGINT) AS cod_msg_typ, CAST(JSON_VALUE(payload, '$.before.COD_PROC') AS BIGINT) AS cod_proc, CAST(JSON_VALUE(payload, '$.before.CTR_UPDAT_SRLNO') AS BIGINT) AS ctr_updat_srlno, CAST (JSON_VALUE(payload, '$.before.DAT_POST') as timestamp(6)) AS dat_post, CAST(JSON_VALUE(payload, '$.before.AMT_TXN_TCY') AS decimal(35,15)) AS amt_txn_tcy, CAST(JSON_VALUE(payload, '$.before.COD_TXN_CCY') AS decimal(35,15)) AS cod_txn_ccy, CAST(JSON_VALUE(payload, '$.before.RAT_CONV_TCLCY') AS decimal(35,15)) AS rat_conv_tclcy, CAST(JSON_VALUE(payload, '$.before.COD_SC') AS BIGINT) AS cod_sc, JSON_VALUE(payload, '$.before.COD_AUTH_payload') AS COD_AUTH_ID, JSON_VALUE(payload, '$.before.REF_CARD_NO') AS ref_card_no, JSON_VALUE(payload, '$.before.REF_TXN_NO') AS ref_txn_no, JSON_VALUE(payload, '$.before.REF_USR_NO') AS ref_usr_no, JSON_VALUE(payload, '$.before.TXT_ADDL_INFO') AS txt_addl_info, CAST( JSON_VALUE(payload, '$.before.DAT_TS_TXN_INIT')as timestamp(6)) AS dat_ts_txn_init, CAST( JSON_VALUE(payload, '$.before.DAT_TS_SENT_FOR_AUTH')as timestamp(6)) AS dat_ts_sent_for_auth, CAST(JSON_VALUE(payload, '$.before.DAT_TS_AUTH')as timestamp(6)) AS dat_ts_auth, cast( JSON_VALUE(payload, '$.before.DAT_TS_SUB_FOR_PROCESSING')as timestamp(6)) AS dat_ts_sub_for_processing, cast( JSON_VALUE(payload, '$.before.DAT_TS_SENT_TO_HOST')as timestamp(6)) AS dat_ts_sent_to_host, cast(JSON_VALUE(payload, '$.before.DAT_TS_HOST_PROCESSING')as timestamp(6)) AS dat_ts_host_processing, CAST(JSON_VALUE(payload, '$.before.COD_ENTITY_VPD') AS BIGINT) AS cod_entity_vpd, CAST(YEAR(CAST(CURRENT_DATE AS DATE)) AS BIGINT) AS business_year, CAST(MONTH(CAST(CURRENT_DATE AS DATE)) AS BIGINT) AS business_month, CURRENT_DATE AS business_date, cast(MD5(CONCAT( coalesce(CAST( JSON_VALUE(payload, '$.before.DAT_TXN') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.COD_CC_BRN_TXN') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.COD_USERNO') AS STRING),'NA'), coalesce(CAST( JSON_VALUE(payload, '$.before.CTR_BATCH_NO') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.REF_SYS_TR_AUD_NO') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.REF_SUB_SEQ_NO') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.COD_ACCT_NO') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.TXT_TXN_DESC') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.DAT_VALUE') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.REF_CHQ_NO') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.COD_DRCR') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.COD_TXN_MNEMONIC') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.COD_TXN_LITERAL') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.AMT_TXN') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.FLG_PASBKUPD') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.RAT_CCY') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.COD_MSG_TYP') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.COD_PROC') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.CTR_UPDAT_SRLNO') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.DAT_POST') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.AMT_TXN_TCY') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.COD_TXN_CCY') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.RAT_CONV_TCLCY') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.COD_SC') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.COD_AUTH_payload') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.REF_CARD_NO') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.REF_TXN_NO') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.REF_USR_NO') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.TXT_ADDL_INFO') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.DAT_TS_TXN_INIT') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.DAT_TS_SENT_FOR_AUTH') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.DAT_TS_AUTH') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.DAT_TS_SUB_FOR_PROCESSING') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.DAT_TS_SENT_TO_HOST') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.DAT_TS_HOST_PROCESSING') AS STRING),'NA') , coalesce(CAST( JSON_VALUE(payload, '$.before.COD_ENTITY_VPD') AS STRING),'NA') )) as varchar(500)) AS rowhash, CAST(NULL AS VARCHAR) AS recordsurrogatekey, CURRENT_TIMESTAMP AS recordcreateddate, CURRENT_TIMESTAMP AS recordupdateddate, 'N' as ERROR_FLAG, '' as ERROR_MESSAGE, 'Y' AS DEL_FLG, CURRENT_DATE AS PROCESS_DATE, 'CH_NOBOOK_BATCH' AS BATCH_ID , messageid FROM default_catalog.default_database.SOLACE_SOURCE where JSON_VALUE(headers, '$.GG_OPTYPE') IN ('UPDATE', 'DELETE')) a";

			// Add all SQL queries to StatementSet
			statementSet.addInsertSql(insertRawSink);
			statementSet.addInsertSql(insertAfter);
			statementSet.addInsertSql(updateAfter);
			statementSet.addInsertSql(updateBefore);


			// Execute both INSERT statements together
			statementSet.execute();

		}
		catch (Exception e){
			LOG.info("Flink job execution failed:" +e);
		}

	}
}